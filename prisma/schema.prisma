// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?   // Добавляем поле телефона
  userType      String?   // Тип пользователя: "carrier" (перевозчик) или "customer" (заказчик)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  orders        Order[]
  transports    Transport[]  // Добавляем связь с транспортом
  
  // Связи для чата
  responses     Response[] @relation("CarrierResponses")
  messages      Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Order {
  id          String   @id @default(cuid())
  number      String
  status      String
  date        String
  routeFrom   String
  routeTo     String
  price       Float
  cargoType   String
  cargoWeight String
  description String?
  imageUrl    String?  // Добавляем поле для URL изображения
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связь с пользователем
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Связь с откликами
  responses   Response[]
}

// Модель для откликов перевозчиков на заказы
model Response {
  id        String   @id @default(cuid())
  status    String   @default("pending") // pending, accepted, rejected
  message   String?  // Сообщение от перевозчика
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Связь с заказом
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Связь с перевозчиком
  carrierId String
  carrier   User     @relation("CarrierResponses", fields: [carrierId], references: [id], onDelete: Cascade)
  
  // Связь с сообщениями чата
  messages  Message[]
}

// Модель для сообщений чата
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  // Связь с откликом
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  // Связь с отправителем
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}


model Transport {
  id              String   @id @default(cuid())
  title           String   // Название объявления
  vehicleType     String   // Тип транспорта
  carryingCapacity Float   // Грузоподъемность в тоннах
  platformLength  Float?   // Длина платформы в метрах
  platformWidth   Float?   // Ширина платформы в метрах
  description     String?  // Описание
  workPeriod      String   // Период работы
  city            String   // Город
  minOrderTime    String   // Минимальное время заказа
  price           String   // Цена (может быть "договорная")
  driverName      String   // Имя водителя
  phoneNumber     String   // Номер телефона
  imageUrl        String?  // URL изображения
  status          String   @default("active") // active, inactive
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Связь с пользователем
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



